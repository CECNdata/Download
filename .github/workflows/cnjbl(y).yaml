name: 'cnjbl(y)'

on:
  workflow_dispatch:
    inputs:
        tags:
          description: 'action'  

env:
  repo_name: CECNdata/GA-sec
  retry: 3

jobs:
  shell:
    runs-on: ubuntu-latest
    strategy:
      matrix:
       include:
         - csv: cnjbly.csv
           line: 0
         - csv: cnjbly.csv
           line: 1
         - csv: cnjbly.csv
           line: 0
         - csv: cnjbly.csv
           line: 1

    steps:
      - name: Checkout codes
        uses: actions/checkout@v3
        with:
          repository: '${{ env.repo_name  }}'
          token: ${{ secrets.GH_PAT }} # `GH_PAT` is a secret that contains you PAT

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          cd customs
          python -m pip install --upgrade pip
          pip install fire
          pip install pipreqs
          pipreqs .
          pip install -r requirements.txt

      - name: Install Playwright
        run: |
            python -m playwright install

      - name: run customs download
        run: |
            cd customs
            python run.py  --path mapping/${{matrix.csv}} --line "${{matrix.line}}" --retry ${{env.retry}}

      #- name: gist-read
      #  uses: sergeysova/gist-read-action@v1
      #  id: example-gist
      #  with:
      #    gist_id: ${{matrix.gist_id}}
      #    file_name: md5.txt
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.SEC_TOKEN }}

      #- name: md5_count
      #  run: |
      #      wget https://raw.githubusercontent.com/CECNdata/GA-pub/main/gist/gist_md5.py
      #      echo "${{ steps.example-gist.outputs.content }}" > md5.txt
      #      echo "[GA] [EBPA] ${{matrix.atp}} just capture new!" > Ebpa/modules/message.txt
      #      files_num=`python gist_md5.py --file_md5="./md5.txt" --file_dir="Ebpa/modules/download/"`
      #      echo $files_num
      #      echo '::set-output name=FILE_NUM::'$files_num
      #      head md5.txt
      #  id: gist-md5

      - name: zip_download
        run: |
            zip -r attach.zip Ebpa/modules/download/*

      - name: Send mail
        id: retry
        uses: Wandalen/wretry.action@v1.0.11
        with:
          #server_address: smtp.gmail.com
          #server_port: 465
          #server_address: smtp-mail.outlook.com
          #server_port: 587
          action: dawidd6/action-send-mail@v3
          with: |
            server_address: smtp.gmail.com
            server_port: 465
            username : ${{ secrets.GMAIL_USERNAME }}
            password : ${{ secrets.GMAIL_PASSWORD }}
            subject: Actions for [ ${{matrix.atp}} ]
            body: ${{matrix.atp}} just capture new release!
            to: ${{matrix.atp}}@${{secrets.BASE_MAIL}},${{matrix.SKYPE_MINE_USERNAME}}
            from: ${{ secrets.GMAIL_USERNAME }}
            attachments: attach.zip
          attempt_limit: 3
          attempt_delay: 2000

      #- uses: popsiclestick/gist-sync-action@v1.2.0
      #  if  :  steps.gist-md5.outputs.FILE_NUM != '0' && steps.retry.outcome == 'success'   
      #  with:
      #    auth: ${{ secrets.SEC_TOKEN }}
      #    gist_url: https://gist.github.com/CECNdata/${{ matrix.gist_id }}
      #    gist_title: md5.txt
      #    gist_description: ${{ env.GITHUB_WORKFLOW }}
      #    github_file: md5.txt

      #- name: send skype
      #  uses: Eloco/docker-action-send-skype@v2
      #  if  : ${{ env.IF_SKYPE  == 'True'}}
      #  #if  : (steps.gist-md5.outputs.FILE_NUM != '0') && ${{ env.IF_SKYPE  == 'True'}}
      #  with:
      #      skype_username : ${{ secrets.SKYPE_MINE_USERNAME }}
      #      skype_password : ${{ secrets.SKYPE_MINE_PASSWORD }}
      #      skype_ids      : ${{ matrix.skype_id  }}
      #      send_msg_path  : Ebpa/modules/message.txt
      #      send_file_path : attach.zip
      #  env:
      #      IF_SKYPE: ${{ matrix.if_skype }}

       #- name: aws setup
       #  if: ${{ env.IF_AWS == 'True'}}
       #  run: |
       #      python -m pip install awscli
       #      mkdir ~/.aws
       #      echo "[default]" >> ~/.aws/credentials
       #      echo "[default]" >> ~/.aws/config
       #      echo "aws_access_key_id    = ${{ secrets.AWS_ACCESS_KEY_ID     }}" >> ~/.aws/credentials
       #      echo "aws_secret_access_key= ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
       #      echo "region               = ap-east-1"                            >> ~/.aws/config
       #  env:
       #      IF_AWS: ${{ matrix.IF_AWS }}

       #- name: aws md5 check
       #  if: ${{ env.IF_AWS == 'True'}}
       #  run: |
       #      export action_bucket=s3://`echo ${GITHUB_REPOSITORY_OWNER}action | tr "[A-Z]" "[a-z]"`
       #      export command="python aws/md5_aws.py --files_path=${{ matrix.FILE_BASE }} 2>/dev/null"
       #      files_num=`timeout 5m bash -c '$command || $command || echo 0'` #retry command twice 
       #      echo $files_num
       #      echo '::set-output name=FILE_NUM::'$files_num
       #  id: aws-md5
       #  env:
       #      IF_AWS: ${{ matrix.IF_AWS }}
